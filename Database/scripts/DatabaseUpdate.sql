
ALTER TABLE CADDIS2.K_CAUSE_EFFECT
DROP CONSTRAINT FK_K_CAUSE_EFFECT_EFFE_MEAS_ID;



ALTER TABLE CADDIS2.K_CAUSE_EFFECT
DROP CONSTRAINT FK_K_CAUSE_EFFECT_MEASURED_ID;



ALTER TABLE CADDIS2.K_LOCATION
DROP PRIMARY KEY CASCADE  DROP INDEX;



ALTER TABLE CADDIS2.K_CAUSE_EFFECT
DROP CONSTRAINT UX_K_CAUSE_EFFECT CASCADE  DROP INDEX;




ALTER TABLE CADDIS2.K_CAUSE_EFFECT
  DROP COLUMN LL_CAUSE_MEASURED_ID CASCADE CONSTRAINTS;




ALTER TABLE CADDIS2.K_CAUSE_EFFECT
  DROP COLUMN LL_EFFECT_MEASURED_ID CASCADE CONSTRAINTS;



DROP INDEX PPARESH.PK_K_LOCATION;



DROP INDEX PPARESH.UX_K_CAUSE_EFFECT;



ALTER TABLE CADDIS2.K_ANALYSIS_DETAILS
	ADD (LL_MEASURE_TYPE_ID NUMBER(11));



ALTER TABLE CADDIS2.K_CAUSE_EFFECT
	ADD (CAUSE_MEASURED VARCHAR2(250));



ALTER TABLE CADDIS2.K_CAUSE_EFFECT
	ADD (EFFECT_MEASURED VARCHAR2(250));



ALTER TABLE CADDIS2.K_ANALYSIS_DETAILS
	ADD (RESPONSE_MEASURE VARCHAR2(20));



CREATE TABLE P_CITATION_FILE
(
	CITATION_ID          NUMBER(11) NOT NULL ,
	CITATION_FILE_ID     INTEGER NOT NULL ,
	FILE_NAME            VARCHAR2(200) NOT NULL ,
	FILE_TYPE            VARCHAR2(20) NOT NULL ,
	FILE_CONTENT         BLOB NOT NULL ,
	CREATE_DATE          DATE NOT NULL ,
	UPDATE_DATE          DATE NULL ,
	CREATE_USER          VARCHAR2(100) NULL ,
	UPDATE_USER          VARCHAR2(100) NULL 
);




COMMENT ON COLUMN P_CITATION_FILE.CITATION_ID IS 'Uniue identifier of the citation info';



CREATE UNIQUE INDEX XPKP_CITATION_FILE ON P_CITATION_FILE
(CITATION_FILE_ID   ASC);

CREATE SEQUENCE CADDIS2.SEQ_FILE_ID
START WITH 0
INCREMENT BY 1
MINVALUE 0
NOCACHE 
NOCYCLE 
NOORDER ;

CREATE TABLE P_STERM_CATEGORY
(
	STERM_CATEGORY_ID    INTEGER NOT NULL ,
	STANDARD_TERM_ID     NUMBER(12) NOT NULL ,
	LL_CATEGORY_ID       NUMBER(11) NOT NULL 
);




COMMENT ON COLUMN P_STERM_CATEGORY.LL_CATEGORY_ID IS 'Uniue identifier of the list item record';



CREATE UNIQUE INDEX XPKP_STERM_CATEGORY ON P_STERM_CATEGORY
(STERM_CATEGORY_ID   ASC);



CREATE UNIQUE INDEX PPARESH.PK_K_LOCATION ON CADDIS2.K_LOCATION
(LL_LOCATION_ID   ASC);



COMMENT ON COLUMN CADDIS2.K_ANALYSIS_DETAILS.LL_MEASURE_TYPE_ID IS 'Uniue identifier of the list item record';



CREATE UNIQUE INDEX PPARESH.UX_K_CAUSE_EFFECT ON CADDIS2.K_CAUSE_EFFECT
(DATASET_ID   ASC,CAUSE_ID   ASC,EFFECT_ID   ASC,LL_CAUSE_TRAJECTORY_ID   ASC,LL_EFFECT_TRAJECTORY_ID   ASC);



ALTER TABLE P_CITATION_FILE
ADD CONSTRAINT  XPKP_CITATION_FILE PRIMARY KEY (CITATION_FILE_ID);



ALTER TABLE P_STERM_CATEGORY
ADD CONSTRAINT  XPKP_STERM_CATEGORY PRIMARY KEY (STERM_CATEGORY_ID);

CREATE SEQUENCE CADDIS2.SEQ_CATEGORY_ID
START WITH 0
INCREMENT BY 1
MINVALUE 0
NOCACHE 
NOCYCLE 
NOORDER ;

ALTER TABLE CADDIS2.K_LOCATION
ADD CONSTRAINT  PK_K_LOCATION PRIMARY KEY (LL_LOCATION_ID)  NOT DEFERRABLE  INITIALLY IMMEDIATE   USING INDEX 
	PCTFREE 10
	INITRANS 2
	STORAGE ( 
		INITIAL 64K
		NEXT 1024K
		MINEXTENTS 1
		MAXEXTENTS UNLIMITED
		BUFFER_POOL DEFAULT
	 )
	LOGGING
	TABLESPACE CADDIS_INDEX
	NOCOMPRESS 
	NOPARALLEL  ENABLE  VALIDATE;



ALTER TABLE CADDIS2.K_CAUSE_EFFECT
ADD CONSTRAINT  UX_K_CAUSE_EFFECT UNIQUE (DATASET_ID,CAUSE_ID,EFFECT_ID,LL_CAUSE_TRAJECTORY_ID,LL_EFFECT_TRAJECTORY_ID)  NOT DEFERRABLE  INITIALLY IMMEDIATE   USING INDEX 
	PCTFREE 10
	INITRANS 2
	STORAGE ( 
		INITIAL 64K
		NEXT 1024K
		MINEXTENTS 1
		MAXEXTENTS UNLIMITED
		BUFFER_POOL DEFAULT
	 )
	LOGGING
	TABLESPACE CADDIS_DATA
	NOCOMPRESS 
	NOPARALLEL  ENABLE  VALIDATE;



ALTER TABLE P_CITATION_FILE
ADD CONSTRAINT FK_CITATION_ID_FILE FOREIGN KEY (CITATION_ID) REFERENCES CADDIS2.P_CITATION (CITATION_ID);



ALTER TABLE P_STERM_CATEGORY
ADD CONSTRAINT FK_PSTERM_CATEGORY_ID FOREIGN KEY (STANDARD_TERM_ID) REFERENCES CADDIS2.P_STANDARD_TERM (STANDARD_TERM_ID) ON DELETE SET NULL;



ALTER TABLE P_STERM_CATEGORY
ADD CONSTRAINT FK_P_LIST_ID_STERM_CATEGORY FOREIGN KEY (LL_CATEGORY_ID) REFERENCES CADDIS2.P_LIST_ITEM (LL_ID) ON DELETE SET NULL;



ALTER TABLE K_ANALYSIS_DETAILS
ADD CONSTRAINT FK_P_LIST_MEASURE_TYPE_ID FOREIGN KEY (LL_MEASURE_TYPE_ID) REFERENCES CADDIS2.P_LIST_ITEM (LL_ID) ON DELETE SET NULL;



CREATE  TRIGGER tI_P_CITATION_FILE BEFORE INSERT ON P_CITATION_FILE for each row
-- ERwin Builtin Trigger
-- INSERT trigger on P_CITATION_FILE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* CADDIS2.P_CITATION  P_CITATION_FILE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00012516", PARENT_OWNER="CADDIS2", PARENT_TABLE="P_CITATION"
    CHILD_OWNER="", CHILD_TABLE="P_CITATION_FILE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CITATION_ID_FILE", FK_COLUMNS="CITATION_ID" */
    SELECT count(*) INTO NUMROWS
      FROM CADDIS2.P_CITATION
      WHERE
        /* %JoinFKPK(:%New,CADDIS2.P_CITATION," = "," AND") */
        :new.CITATION_ID = CADDIS2.P_CITATION.CITATION_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert P_CITATION_FILE because CADDIS2.P_CITATION does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_P_CITATION_FILE AFTER UPDATE ON P_CITATION_FILE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on P_CITATION_FILE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* CADDIS2.P_CITATION  P_CITATION_FILE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000127b1", PARENT_OWNER="CADDIS2", PARENT_TABLE="P_CITATION"
    CHILD_OWNER="", CHILD_TABLE="P_CITATION_FILE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CITATION_ID_FILE", FK_COLUMNS="CITATION_ID" */
  SELECT count(*) INTO NUMROWS
    FROM CADDIS2.P_CITATION
    WHERE
      /* %JoinFKPK(:%New,CADDIS2.P_CITATION," = "," AND") */
      :new.CITATION_ID = CADDIS2.P_CITATION.CITATION_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update P_CITATION_FILE because CADDIS2.P_CITATION does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_P_STERM_CATEGORY BEFORE INSERT ON P_STERM_CATEGORY for each row
-- ERwin Builtin Trigger
-- INSERT trigger on P_STERM_CATEGORY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* CADDIS2.P_STANDARD_TERM  P_STERM_CATEGORY on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0002a5ad", PARENT_OWNER="CADDIS2", PARENT_TABLE="P_STANDARD_TERM"
    CHILD_OWNER="", CHILD_TABLE="P_STERM_CATEGORY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PSTERM_CATEGORY_ID", FK_COLUMNS="STANDARD_TERM_ID" */
    UPDATE P_STERM_CATEGORY
      SET
        /* %SetFK(P_STERM_CATEGORY,NULL) */
        P_STERM_CATEGORY.STANDARD_TERM_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM CADDIS2.P_STANDARD_TERM
            WHERE
              /* %JoinFKPK(:%New,CADDIS2.P_STANDARD_TERM," = "," AND") */
              :new.STANDARD_TERM_ID = CADDIS2.P_STANDARD_TERM.STANDARD_TERM_ID
        ) 
        /* %JoinPKPK(P_STERM_CATEGORY,:%New," = "," AND") */
         and P_STERM_CATEGORY.STERM_CATEGORY_ID = :new.STERM_CATEGORY_ID;

    /* ERwin Builtin Trigger */
    /* CADDIS2.P_LIST_ITEM  P_STERM_CATEGORY on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="CADDIS2", PARENT_TABLE="P_LIST_ITEM"
    CHILD_OWNER="", CHILD_TABLE="P_STERM_CATEGORY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_P_LIST_ID_STERM_CATEGORY", FK_COLUMNS="LL_CATEGORY_ID" */
    UPDATE P_STERM_CATEGORY
      SET
        /* %SetFK(P_STERM_CATEGORY,NULL) */
        P_STERM_CATEGORY.LL_CATEGORY_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM CADDIS2.P_LIST_ITEM
            WHERE
              /* %JoinFKPK(:%New,CADDIS2.P_LIST_ITEM," = "," AND") */
              :new.LL_CATEGORY_ID = CADDIS2.P_LIST_ITEM.LL_ID
        ) 
        /* %JoinPKPK(P_STERM_CATEGORY,:%New," = "," AND") */
         and P_STERM_CATEGORY.STERM_CATEGORY_ID = :new.STERM_CATEGORY_ID;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_P_STERM_CATEGORY AFTER UPDATE ON P_STERM_CATEGORY for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on P_STERM_CATEGORY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* CADDIS2.P_STANDARD_TERM  P_STERM_CATEGORY on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002ac05", PARENT_OWNER="CADDIS2", PARENT_TABLE="P_STANDARD_TERM"
    CHILD_OWNER="", CHILD_TABLE="P_STERM_CATEGORY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PSTERM_CATEGORY_ID", FK_COLUMNS="STANDARD_TERM_ID" */
  SELECT count(*) INTO NUMROWS
    FROM CADDIS2.P_STANDARD_TERM
    WHERE
      /* %JoinFKPK(:%New,CADDIS2.P_STANDARD_TERM," = "," AND") */
      :new.STANDARD_TERM_ID = CADDIS2.P_STANDARD_TERM.STANDARD_TERM_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.STANDARD_TERM_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update P_STERM_CATEGORY because CADDIS2.P_STANDARD_TERM does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* CADDIS2.P_LIST_ITEM  P_STERM_CATEGORY on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="CADDIS2", PARENT_TABLE="P_LIST_ITEM"
    CHILD_OWNER="", CHILD_TABLE="P_STERM_CATEGORY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_P_LIST_ID_STERM_CATEGORY", FK_COLUMNS="LL_CATEGORY_ID" */
  SELECT count(*) INTO NUMROWS
    FROM CADDIS2.P_LIST_ITEM
    WHERE
      /* %JoinFKPK(:%New,CADDIS2.P_LIST_ITEM," = "," AND") */
      :new.LL_CATEGORY_ID = CADDIS2.P_LIST_ITEM.LL_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.LL_CATEGORY_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update P_STERM_CATEGORY because CADDIS2.P_LIST_ITEM does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/

